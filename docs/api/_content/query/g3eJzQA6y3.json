{"_path":"/nuxt-parse","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Features","description":"","excerpt":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"features"},"children":[{"type":"text","value":"Features"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"✔️ Validate Data using "},{"type":"element","tag":"a","props":{"href":"https://github.com/colinhacks/zod","rel":["nofollow"]},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"zod"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"✔️ Deserialize and Serialize user, backend, api data"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"✔️ Helpers focused on Nuxt 3 usage and developer experience"}]}]},{"type":"element","tag":"h1","props":{"id":"usage"},"children":[{"type":"text","value":"Usage"}]},{"type":"element","tag":"code","props":{"code":"npm i @sidebase/nuxt-parse\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npm i @sidebase/nuxt-parse\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Then, e.g., in your code:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Make an arbitrary parser, e.g., to deserialize data from an API:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Example with valid data:"},{"type":"element","tag":"code","props":{"code":"import { z, makeParser } from \"@sidebase/nuxt-parse\"\n\n// Define the expected response schema\nconst responseSchema = z.object({\n    uuid: z.string().uuid(),\n})\n\n// Perform the request, use `makeParse` to pass a transformer for the data\nconst { data, error } = await useFetch('https://httpbin.org/uuid', {\n    transform: makeParser(responseSchema),\n})\n\nconsole.log(`data is ${data.value}`)\n// -> `data is {\"uuid\":\"f8df921c-d7f3-43c1-ac9b-3cf5d4da2f7b\"}`\n\nconsole.log(`error is ${error.value}`)\n// -> `error is false`\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { z, makeParser } from \"@sidebase/nuxt-parse\"\n\n// Define the expected response schema\nconst responseSchema = z.object({\n    uuid: z.string().uuid(),\n})\n\n// Perform the request, use `makeParse` to pass a transformer for the data\nconst { data, error } = await useFetch('https://httpbin.org/uuid', {\n    transform: makeParser(responseSchema),\n})\n\nconsole.log(`data is ${data.value}`)\n// -> `data is {\"uuid\":\"f8df921c-d7f3-43c1-ac9b-3cf5d4da2f7b\"}`\n\nconsole.log(`error is ${error.value}`)\n// -> `error is false`\n"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Example with invalid data:"},{"type":"element","tag":"code","props":{"code":"import { z, makeParser } from \"@sidebase/nuxt-parse\"\n\n// Define the expected response schema\nconst responseSchema = z.object({\n    uuid: z.string().uuid(),\n})\n\n// Perform the request, use `makeParse` to pass a transformer for the data\nconst { data, error } = await useFetch('https://httpbin.org/ip', {\n    transform: makeParser(responseSchema),\n})\n\nconsole.log(`data is ${data.value}`)\n// -> `data is null`\n\nconsole.log(`error is ${error.value}`)\n// -> `error is true`\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { z, makeParser } from \"@sidebase/nuxt-parse\"\n\n// Define the expected response schema\nconst responseSchema = z.object({\n    uuid: z.string().uuid(),\n})\n\n// Perform the request, use `makeParse` to pass a transformer for the data\nconst { data, error } = await useFetch('https://httpbin.org/ip', {\n    transform: makeParser(responseSchema),\n})\n\nconsole.log(`data is ${data.value}`)\n// -> `data is null`\n\nconsole.log(`error is ${error.value}`)\n// -> `error is true`\n"}]}]}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Handle user data in an endpoint:"},{"type":"element","tag":"code","props":{"code":"import { defineEventHandler } from 'h3'\nimport type { CompatibilityEvent } from 'h3'\nimport { z, parseParamsAs, parseBodyAs } from \"@sidebase/nuxt-parse\"\n\n// Define the schema of the parameters you expect the user to provide you with\nconst paramsSchema = z.object({\n    id: z.string().uuid(),\n})\n\n// Define the schema of the body you expect the user to provide you with\nconst bodySchema = z.object({\n    name: z.string(),\n    age: z.number()\n})\n\n// Get a nice type to use throughout your code and components\ntype RequestBody = z.infer<typeof bodySchema>\n\nexport default defineEventHandler(async (event: CompatibilityEvent) => {\n    // Validate and then get the parameters\n    // This automatically throws a nice HTTP 422 error with more information if the data is invalid\n    const params = parseParamsAs(event, paramsSchema)\n\n    let body: RequestBody;\n    try {\n        body = parseBodyAs(event, paramsSchema)\n    } catch(error) {\n        // Fallback, this avoids automatic raising + returning of the HTTP 422 error\n        body = {\n            name: 'Bernd',\n            age: 88\n        }\n    }\n\n    // Return the full entity\n    return {\n        id: params.id,\n        ...body\n    }\n})\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { defineEventHandler } from 'h3'\nimport type { CompatibilityEvent } from 'h3'\nimport { z, parseParamsAs, parseBodyAs } from \"@sidebase/nuxt-parse\"\n\n// Define the schema of the parameters you expect the user to provide you with\nconst paramsSchema = z.object({\n    id: z.string().uuid(),\n})\n\n// Define the schema of the body you expect the user to provide you with\nconst bodySchema = z.object({\n    name: z.string(),\n    age: z.number()\n})\n\n// Get a nice type to use throughout your code and components\ntype RequestBody = z.infer<typeof bodySchema>\n\nexport default defineEventHandler(async (event: CompatibilityEvent) => {\n    // Validate and then get the parameters\n    // This automatically throws a nice HTTP 422 error with more information if the data is invalid\n    const params = parseParamsAs(event, paramsSchema)\n\n    let body: RequestBody;\n    try {\n        body = parseBodyAs(event, paramsSchema)\n    } catch(error) {\n        // Fallback, this avoids automatic raising + returning of the HTTP 422 error\n        body = {\n            name: 'Bernd',\n            age: 88\n        }\n    }\n\n    // Return the full entity\n    return {\n        id: params.id,\n        ...body\n    }\n})\n"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Parse any data:"},{"type":"element","tag":"code","props":{"code":"import { z, parseDataAs } from \"@sidebase/nuxt-parse\"\n\nconst parsedData = await parseDataAs({ test: \"1\" }, z.object({ test: z.number() )}))\n// -> throws! `\"1\"` is not a number, but a string!\n\nconst parsedData = await parseDataAs({ test: 1 }, z.object({ test: z.number() )}))\nconsole.log(parsedData)\n// -> output: `{ test: 1 }`\n\n\nconst parsedData = await parseDataAs({ test: \"1\" }, z.object({ test: z.string().transform(v => parseInt(v)) )}))\nconsole.log(parsedData)\n// -> output: `{ test: 1 }` (we used `.transform` to ensure that we get a number)\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { z, parseDataAs } from \"@sidebase/nuxt-parse\"\n\nconst parsedData = await parseDataAs({ test: \"1\" }, z.object({ test: z.number() )}))\n// -> throws! `\"1\"` is not a number, but a string!\n\nconst parsedData = await parseDataAs({ test: 1 }, z.object({ test: z.number() )}))\nconsole.log(parsedData)\n// -> output: `{ test: 1 }`\n\n\nconst parsedData = await parseDataAs({ test: \"1\" }, z.object({ test: z.string().transform(v => parseInt(v)) )}))\nconsole.log(parsedData)\n// -> output: `{ test: 1 }` (we used `.transform` to ensure that we get a number)\n"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Also works with async data, e.g., when fetching from another API or DB:"},{"type":"element","tag":"code","props":{"code":"import { z, parseDataAs } from \"@sidebase/nuxt-parse\"\n\nconst fakeDatabaseQuery = async () => { id: 1 }\nconst parsedData = await parseDataAs(fakeDatabaseQuery, z.object({ id: z.number() )}))\n\nconsole.log(parsedData)\n// -> output: `1`\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { z, parseDataAs } from \"@sidebase/nuxt-parse\"\n\nconst fakeDatabaseQuery = async () => { id: 1 }\nconst parsedData = await parseDataAs(fakeDatabaseQuery, z.object({ id: z.number() )}))\n\nconsole.log(parsedData)\n// -> output: `1`\n"}]}]}]}]}]},{"type":"element","tag":"h1","props":{"id":"documentation"},"children":[{"type":"text","value":"Documentation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Full tsdoc-documentation is here: "},{"type":"element","tag":"a","props":{"href":"https://nuxt-sidebase-parse.sidebase.io","rel":["nofollow"]},"children":[{"type":"text","value":"https://nuxt-sidebase-parse.sidebase.io"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This module exports:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"parseBodyAs"}]},{"type":"text","value":": Parse body of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"h3"}]},{"type":"text","value":" event"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"parseParamsAs"}]},{"type":"text","value":": Parse params of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"h3"}]},{"type":"text","value":" event"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"parseQueryAs"}]},{"type":"text","value":": Parse query of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"h3"}]},{"type":"text","value":" event"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"parseCookieAs"}]},{"type":"text","value":": Parse cookies of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"h3"}]},{"type":"text","value":" event"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"parseHeaderAs"}]},{"type":"text","value":": Parse header of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"h3"}]},{"type":"text","value":" event"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"parseDataAs"}]},{"type":"text","value":": Parse sync or async data"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"makeParser"}]},{"type":"text","value":": Make your own parser (see example above)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"z"}]},{"type":"text","value":": "},{"type":"element","tag":"a","props":{"href":"https://github.com/colinhacks/zod","rel":["nofollow"]},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"zod"}]}]},{"type":"text","value":", the library used for parsing"}]}]},{"type":"element","tag":"h1","props":{"id":"development"},"children":[{"type":"text","value":"Development"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Run "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"npm run test"}]},{"type":"text","value":" to generate type stubs"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Run "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"npm run lint"}]},{"type":"text","value":" to run eslint"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Run "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"npm run type"}]},{"type":"text","value":" to run typescheck via tsc"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Run "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"npm publish"}]},{"type":"text","value":" to run build and publish the package"}]}]}]},"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"features"},"children":[{"type":"text","value":"Features"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"✔️ Validate Data using "},{"type":"element","tag":"a","props":{"href":"https://github.com/colinhacks/zod","rel":["nofollow"]},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"zod"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"✔️ Deserialize and Serialize user, backend, api data"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"✔️ Helpers focused on Nuxt 3 usage and developer experience"}]}]},{"type":"element","tag":"h1","props":{"id":"usage"},"children":[{"type":"text","value":"Usage"}]},{"type":"element","tag":"code","props":{"code":"npm i @sidebase/nuxt-parse\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npm i @sidebase/nuxt-parse\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Then, e.g., in your code:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Make an arbitrary parser, e.g., to deserialize data from an API:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Example with valid data:"},{"type":"element","tag":"code","props":{"code":"import { z, makeParser } from \"@sidebase/nuxt-parse\"\n\n// Define the expected response schema\nconst responseSchema = z.object({\n    uuid: z.string().uuid(),\n})\n\n// Perform the request, use `makeParse` to pass a transformer for the data\nconst { data, error } = await useFetch('https://httpbin.org/uuid', {\n    transform: makeParser(responseSchema),\n})\n\nconsole.log(`data is ${data.value}`)\n// -> `data is {\"uuid\":\"f8df921c-d7f3-43c1-ac9b-3cf5d4da2f7b\"}`\n\nconsole.log(`error is ${error.value}`)\n// -> `error is false`\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { z, makeParser } from \"@sidebase/nuxt-parse\"\n\n// Define the expected response schema\nconst responseSchema = z.object({\n    uuid: z.string().uuid(),\n})\n\n// Perform the request, use `makeParse` to pass a transformer for the data\nconst { data, error } = await useFetch('https://httpbin.org/uuid', {\n    transform: makeParser(responseSchema),\n})\n\nconsole.log(`data is ${data.value}`)\n// -> `data is {\"uuid\":\"f8df921c-d7f3-43c1-ac9b-3cf5d4da2f7b\"}`\n\nconsole.log(`error is ${error.value}`)\n// -> `error is false`\n"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Example with invalid data:"},{"type":"element","tag":"code","props":{"code":"import { z, makeParser } from \"@sidebase/nuxt-parse\"\n\n// Define the expected response schema\nconst responseSchema = z.object({\n    uuid: z.string().uuid(),\n})\n\n// Perform the request, use `makeParse` to pass a transformer for the data\nconst { data, error } = await useFetch('https://httpbin.org/ip', {\n    transform: makeParser(responseSchema),\n})\n\nconsole.log(`data is ${data.value}`)\n// -> `data is null`\n\nconsole.log(`error is ${error.value}`)\n// -> `error is true`\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { z, makeParser } from \"@sidebase/nuxt-parse\"\n\n// Define the expected response schema\nconst responseSchema = z.object({\n    uuid: z.string().uuid(),\n})\n\n// Perform the request, use `makeParse` to pass a transformer for the data\nconst { data, error } = await useFetch('https://httpbin.org/ip', {\n    transform: makeParser(responseSchema),\n})\n\nconsole.log(`data is ${data.value}`)\n// -> `data is null`\n\nconsole.log(`error is ${error.value}`)\n// -> `error is true`\n"}]}]}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Handle user data in an endpoint:"},{"type":"element","tag":"code","props":{"code":"import { defineEventHandler } from 'h3'\nimport type { CompatibilityEvent } from 'h3'\nimport { z, parseParamsAs, parseBodyAs } from \"@sidebase/nuxt-parse\"\n\n// Define the schema of the parameters you expect the user to provide you with\nconst paramsSchema = z.object({\n    id: z.string().uuid(),\n})\n\n// Define the schema of the body you expect the user to provide you with\nconst bodySchema = z.object({\n    name: z.string(),\n    age: z.number()\n})\n\n// Get a nice type to use throughout your code and components\ntype RequestBody = z.infer<typeof bodySchema>\n\nexport default defineEventHandler(async (event: CompatibilityEvent) => {\n    // Validate and then get the parameters\n    // This automatically throws a nice HTTP 422 error with more information if the data is invalid\n    const params = parseParamsAs(event, paramsSchema)\n\n    let body: RequestBody;\n    try {\n        body = parseBodyAs(event, paramsSchema)\n    } catch(error) {\n        // Fallback, this avoids automatic raising + returning of the HTTP 422 error\n        body = {\n            name: 'Bernd',\n            age: 88\n        }\n    }\n\n    // Return the full entity\n    return {\n        id: params.id,\n        ...body\n    }\n})\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { defineEventHandler } from 'h3'\nimport type { CompatibilityEvent } from 'h3'\nimport { z, parseParamsAs, parseBodyAs } from \"@sidebase/nuxt-parse\"\n\n// Define the schema of the parameters you expect the user to provide you with\nconst paramsSchema = z.object({\n    id: z.string().uuid(),\n})\n\n// Define the schema of the body you expect the user to provide you with\nconst bodySchema = z.object({\n    name: z.string(),\n    age: z.number()\n})\n\n// Get a nice type to use throughout your code and components\ntype RequestBody = z.infer<typeof bodySchema>\n\nexport default defineEventHandler(async (event: CompatibilityEvent) => {\n    // Validate and then get the parameters\n    // This automatically throws a nice HTTP 422 error with more information if the data is invalid\n    const params = parseParamsAs(event, paramsSchema)\n\n    let body: RequestBody;\n    try {\n        body = parseBodyAs(event, paramsSchema)\n    } catch(error) {\n        // Fallback, this avoids automatic raising + returning of the HTTP 422 error\n        body = {\n            name: 'Bernd',\n            age: 88\n        }\n    }\n\n    // Return the full entity\n    return {\n        id: params.id,\n        ...body\n    }\n})\n"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Parse any data:"},{"type":"element","tag":"code","props":{"code":"import { z, parseDataAs } from \"@sidebase/nuxt-parse\"\n\nconst parsedData = await parseDataAs({ test: \"1\" }, z.object({ test: z.number() )}))\n// -> throws! `\"1\"` is not a number, but a string!\n\nconst parsedData = await parseDataAs({ test: 1 }, z.object({ test: z.number() )}))\nconsole.log(parsedData)\n// -> output: `{ test: 1 }`\n\n\nconst parsedData = await parseDataAs({ test: \"1\" }, z.object({ test: z.string().transform(v => parseInt(v)) )}))\nconsole.log(parsedData)\n// -> output: `{ test: 1 }` (we used `.transform` to ensure that we get a number)\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { z, parseDataAs } from \"@sidebase/nuxt-parse\"\n\nconst parsedData = await parseDataAs({ test: \"1\" }, z.object({ test: z.number() )}))\n// -> throws! `\"1\"` is not a number, but a string!\n\nconst parsedData = await parseDataAs({ test: 1 }, z.object({ test: z.number() )}))\nconsole.log(parsedData)\n// -> output: `{ test: 1 }`\n\n\nconst parsedData = await parseDataAs({ test: \"1\" }, z.object({ test: z.string().transform(v => parseInt(v)) )}))\nconsole.log(parsedData)\n// -> output: `{ test: 1 }` (we used `.transform` to ensure that we get a number)\n"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Also works with async data, e.g., when fetching from another API or DB:"},{"type":"element","tag":"code","props":{"code":"import { z, parseDataAs } from \"@sidebase/nuxt-parse\"\n\nconst fakeDatabaseQuery = async () => { id: 1 }\nconst parsedData = await parseDataAs(fakeDatabaseQuery, z.object({ id: z.number() )}))\n\nconsole.log(parsedData)\n// -> output: `1`\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { z, parseDataAs } from \"@sidebase/nuxt-parse\"\n\nconst fakeDatabaseQuery = async () => { id: 1 }\nconst parsedData = await parseDataAs(fakeDatabaseQuery, z.object({ id: z.number() )}))\n\nconsole.log(parsedData)\n// -> output: `1`\n"}]}]}]}]}]},{"type":"element","tag":"h1","props":{"id":"documentation"},"children":[{"type":"text","value":"Documentation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Full tsdoc-documentation is here: "},{"type":"element","tag":"a","props":{"href":"https://nuxt-sidebase-parse.sidebase.io","rel":["nofollow"]},"children":[{"type":"text","value":"https://nuxt-sidebase-parse.sidebase.io"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This module exports:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"parseBodyAs"}]},{"type":"text","value":": Parse body of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"h3"}]},{"type":"text","value":" event"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"parseParamsAs"}]},{"type":"text","value":": Parse params of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"h3"}]},{"type":"text","value":" event"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"parseQueryAs"}]},{"type":"text","value":": Parse query of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"h3"}]},{"type":"text","value":" event"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"parseCookieAs"}]},{"type":"text","value":": Parse cookies of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"h3"}]},{"type":"text","value":" event"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"parseHeaderAs"}]},{"type":"text","value":": Parse header of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"h3"}]},{"type":"text","value":" event"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"parseDataAs"}]},{"type":"text","value":": Parse sync or async data"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"makeParser"}]},{"type":"text","value":": Make your own parser (see example above)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"z"}]},{"type":"text","value":": "},{"type":"element","tag":"a","props":{"href":"https://github.com/colinhacks/zod","rel":["nofollow"]},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"zod"}]}]},{"type":"text","value":", the library used for parsing"}]}]},{"type":"element","tag":"h1","props":{"id":"development"},"children":[{"type":"text","value":"Development"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Run "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"npm run test"}]},{"type":"text","value":" to generate type stubs"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Run "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"npm run lint"}]},{"type":"text","value":" to run eslint"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Run "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"npm run type"}]},{"type":"text","value":" to run typescheck via tsc"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Run "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"npm publish"}]},{"type":"text","value":" to run build and publish the package"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:nuxt-parse.md","_source":"content","_file":"nuxt-parse.md","_extension":"md"}