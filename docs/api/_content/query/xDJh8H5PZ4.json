{"_path":"/nuxt-auth","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Quick Start","description":"","excerpt":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"quick-start"},"children":[{"type":"text","value":"Quick Start"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Install the package:"},{"type":"element","tag":"code","props":{"code":"npm i -D @sidebase/nuxt-auth\n","language":"sh"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npm i -D @sidebase/nuxt-auth\n"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Add the package to your "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt.config.ts"}]},{"type":"text","value":":"},{"type":"element","tag":"code","props":{"code":"export default defineNuxtConfig({\n  modules: ['@sidebase/nuxt-auth'],\n})\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"export default defineNuxtConfig({\n  modules: ['@sidebase/nuxt-auth'],\n})\n"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Configure the module with at least one "},{"type":"element","tag":"a","props":{"href":"https://next-auth.js.org/providers/","rel":["nofollow"]},"children":[{"type":"text","value":"authentication provider"}]},{"type":"text","value":":"},{"type":"element","tag":"code","props":{"code":"import GithubProvider from 'next-auth/providers/github'\n\nexport default defineNuxtConfig({\n  modules: ['@sidebase/nuxt-auth'],\n  auth: {\n    nextAuth: {\n      options: {\n        providers: [GithubProvider({ clientId: 'enter-your-client-id-here', clientSecret: 'enter-your-client-secret-here' })]\n      }\n    }\n  }\n})\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import GithubProvider from 'next-auth/providers/github'\n\nexport default defineNuxtConfig({\n  modules: ['@sidebase/nuxt-auth'],\n  auth: {\n    nextAuth: {\n      options: {\n        providers: [GithubProvider({ clientId: 'enter-your-client-id-here', clientSecret: 'enter-your-client-secret-here' })]\n      }\n    }\n  }\n})\n"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Done! You can now use all user-related functionality, for example:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"client-side (e.g., from "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".vue"}]},{"type":"text","value":" files):"},{"type":"element","tag":"code","props":{"code":"const {\n  status,\n  data,\n  signIn,\n  signOut,\n} = await useSession({\n  // Whether a session is required. If it is, a redirect to the signin page will happen if no active session exists\n  required: true\n})\n\n// Session status: `unauthenticated`, `loading`, `authenticated`\nstatus.value\n\n// Session data, e.g., expiration, user.email, ...\ndata.value\n\n// Start the unbranded sign-in flow\nawait signIn()\n\n// Logout the user\nawait signOut()\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const {\n  status,\n  data,\n  signIn,\n  signOut,\n} = await useSession({\n  // Whether a session is required. If it is, a redirect to the signin page will happen if no active session exists\n  required: true\n})\n\n// Session status: `unauthenticated`, `loading`, `authenticated`\nstatus.value\n\n// Session data, e.g., expiration, user.email, ...\ndata.value\n\n// Start the unbranded sign-in flow\nawait signIn()\n\n// Logout the user\nawait signOut()\n"}]}]}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"There's more supported methods in the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"useSession"}]},{"type":"text","value":" composable, you can create authentication middlewares for your app and more - read the documentation below."}]},{"type":"element","tag":"h1","props":{"id":"features"},"children":[{"type":"text","value":"Features"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt-auth"}]},{"type":"text","value":" is still under active development. The goal of this library is to reach feature-parity with "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"NextAuth.js"}]},{"type":"text","value":". Currently, the library supports:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"✔️ Client Library:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"useSession"}]},{"type":"text","value":" composable to: "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"signIn"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"signOut"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"getCsrfToken"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"getProviders"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"getSession"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"full typescript support for all methods and property"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"✔️ REST API:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /signin"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"POST /signin/:provider"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET/POST /callback/:provider"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /signout"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"POST /signout"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /session"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /csrf"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /providers"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"✔️ Persistent sessions across requests"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"✔️ Client-side middleware protection"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"✔️ Server-side middleware and endpoint protection"}]}]},{"type":"element","tag":"h1","props":{"id":"demo-page"},"children":[{"type":"text","value":"Demo Page"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Visit the "},{"type":"element","tag":"a","props":{"href":"https://nuxt-auth-example.sidebase.io/","rel":["nofollow"]},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt-auth"}]},{"type":"text","value":" demo page here"}]},{"type":"text","value":":\n"},{"type":"element","tag":"a","props":{"href":"https://nuxt-auth-example.sidebase.io/","rel":["nofollow"]},"children":[{"type":"element","tag":"img","props":{"alt":"nuxt-auth demo page","src":"./.github/nuxt-auth-demo.png"},"children":[]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can find the "},{"type":"element","tag":"a","props":{"href":"https://github.com/sidebase/nuxt-auth-example","rel":["nofollow"]},"children":[{"type":"text","value":"full source code here"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h2","props":{"id":"module-playground"},"children":[{"type":"text","value":"Module Playground"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This module also has it's own playground, you can also use that to get familiar with it and play around a bit:"}]},{"type":"element","tag":"code","props":{"code":"> git clone https://github.com/sidebase/nuxt-auth\n\n> cd nuxt-auth\n\n# **OPEN THE `nuxt.config.ts` and configure your authentication provider (e.g., google, github)**\n\n> npm i\n\n> npm run dev:prepare\n\n> npm run dev\n\n# -> open http://localhost:3000\n","language":"sh"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"> git clone https://github.com/sidebase/nuxt-auth\n\n> cd nuxt-auth\n\n# **OPEN THE `nuxt.config.ts` and configure your authentication provider (e.g., google, github)**\n\n> npm i\n\n> npm run dev:prepare\n\n> npm run dev\n\n# -> open http://localhost:3000\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note: The playground has considerably less polishing than the example page."}]},{"type":"element","tag":"h1","props":{"id":"documentation"},"children":[{"type":"text","value":"Documentation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"First of all: If you want to have an interactive look, either check-out the "},{"type":"element","tag":"a","props":{"href":"#demo-page"},"children":[{"type":"text","value":"demo page"}]},{"type":"text","value":" or the "},{"type":"element","tag":"a","props":{"href":"#module-playground"},"children":[{"type":"text","value":"module playground"}]},{"type":"text","value":" in the sections above."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt-auth"}]},{"type":"text","value":" module takes care of authentication and sessions:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"authentication: The process of ensuring that somebody is who they claims to be. This is like a passport check at the border: You present some sort of proof that 100% tells the checking entity that you are who you claim to be (typically, this is your passport). The border agents checks the passport and let's you through."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"sessions: Persist the information that you have been authenticated for some duration across different requests. Additional data can be attached to a session, e.g., via the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"mail"}]},{"type":"text","value":" or "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"username"}]},{"type":"text","value":" that may be part of data attached to the session. Note: If you need only sessions but no authentication, you can check-out "},{"type":"element","tag":"a","props":{"href":"https://github.com/sidebase/nuxt-session","rel":["nofollow"]},"children":[{"type":"text","value":"nuxt-session"}]},{"type":"text","value":"."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In addition, you can use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt-auth"}]},{"type":"text","value":" to build authorization on top of the supported authentication + session mechanisms: As soon as you know \"whos who\", you can use this information to let somebody with the right email adress (for example) into a specific area. Right now, this is not supported out of the box."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Below we describe:"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#client-side-usage"},"children":[{"type":"text","value":"Client-side usage"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#session-access-and-manipulation"},"children":[{"type":"text","value":"Session access and manipulation"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#redirects"},"children":[{"type":"text","value":"Redirects"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#middlewares"},"children":[{"type":"text","value":"Middlewares"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#global-middlewares"},"children":[{"type":"text","value":"Global middlewares"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#named-middlewares"},"children":[{"type":"text","value":"Named middlewares"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#inline-middlewares"},"children":[{"type":"text","value":"Inline middlewares"}]}]}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#server-side-usage"},"children":[{"type":"text","value":"Server-side usage"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#server-side-endpoint-protection"},"children":[{"type":"text","value":"Server-side endpoint protection"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#server-side-middlewares"},"children":[{"type":"text","value":"Server-side middlewares"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#rest-api"},"children":[{"type":"text","value":"REST API"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#configuration"},"children":[{"type":"text","value":"Configuration"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#prior-work-and-module-concept"},"children":[{"type":"text","value":"Prior Work and Module Concept"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#project-roadmap"},"children":[{"type":"text","value":"Project Roadmap"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#development"},"children":[{"type":"text","value":"Development"}]}]}]},{"type":"element","tag":"h2","props":{"id":"client-side-usage"},"children":[{"type":"text","value":"Client-side usage"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This module allows you user-data access, signing in, signing out and more on the client-side "},{"type":"element","tag":"a","props":{"href":"#session-access-and-manipulation"},"children":[{"type":"text","value":"via "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"useSession"}]}]},{"type":"text","value":". It also allows you to defined "},{"type":"element","tag":"a","props":{"href":"#middlewares"},"children":[{"type":"text","value":"middlewares that protects your page"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h2","props":{"id":"session-access-and-manipulation"},"children":[{"type":"text","value":"Session access and manipulation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"useSession"}]},{"type":"text","value":" composable is your main gateway to accessing and manipulating session-state and data. Here's the main methdos you can use:"}]},{"type":"element","tag":"code","props":{"code":"const {\n  status,\n  data,\n  getCsrfToken,\n  getProviders,\n  getSession,\n  signIn,\n  signOut,\n} = await useSession({\n  // Whether a session is required. If it is, a redirect to the signin page will happen if no active session exists\n  required: true\n})\n\n// Session status, either `unauthenticated`, `loading`, `authenticated`, see https://next-auth.js.org/getting-started/client#signout\nstatus.value\n\n// Session data, either `undefined` (= authentication not attempted), `null` (= user unauthenticated), `loading` (= session loading in progress), see https://next-auth.js.org/getting-started/client#signout\ndata.value\n\n// Get / Reload the current session from the server, pass `{ required: true }` to force a login if no session exists, see https://next-auth.js.org/getting-started/client#getsession\nawait getSession()\n\n// Get the current CSRF token, usually you do not need this function, see https://next-auth.js.org/getting-started/client#signout\nawait getCsrfToken()\n\n// Get the supported providers, e.g., to build your own login page, see https://next-auth.js.org/getting-started/client#getproviders\nawait getProviders()\n\n// Trigger a sign in, see https://next-auth.js.org/getting-started/client#signin\nawait signIn()\n\n// Trigger a sign out, see https://next-auth.js.org/getting-started/client#signout\nawait signOut()\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const {\n  status,\n  data,\n  getCsrfToken,\n  getProviders,\n  getSession,\n  signIn,\n  signOut,\n} = await useSession({\n  // Whether a session is required. If it is, a redirect to the signin page will happen if no active session exists\n  required: true\n})\n\n// Session status, either `unauthenticated`, `loading`, `authenticated`, see https://next-auth.js.org/getting-started/client#signout\nstatus.value\n\n// Session data, either `undefined` (= authentication not attempted), `null` (= user unauthenticated), `loading` (= session loading in progress), see https://next-auth.js.org/getting-started/client#signout\ndata.value\n\n// Get / Reload the current session from the server, pass `{ required: true }` to force a login if no session exists, see https://next-auth.js.org/getting-started/client#getsession\nawait getSession()\n\n// Get the current CSRF token, usually you do not need this function, see https://next-auth.js.org/getting-started/client#signout\nawait getCsrfToken()\n\n// Get the supported providers, e.g., to build your own login page, see https://next-auth.js.org/getting-started/client#getproviders\nawait getProviders()\n\n// Trigger a sign in, see https://next-auth.js.org/getting-started/client#signin\nawait signIn()\n\n// Trigger a sign out, see https://next-auth.js.org/getting-started/client#signout\nawait signOut()\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Session "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" has the following interface:"}]},{"type":"element","tag":"code","props":{"code":"interface DefaultSession {\n    user?: {\n        name?: string | null;\n        email?: string | null;\n        image?: string | null;\n    };\n    expires: ISODateString;\n}\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"interface DefaultSession {\n    user?: {\n        name?: string | null;\n        email?: string | null;\n        image?: string | null;\n    };\n    expires: ISODateString;\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note that this is only set when the use is logged-in and when the provider used to login the user provides the fields."}]},{"type":"element","tag":"h3","props":{"id":"redirects"},"children":[{"type":"text","value":"Redirects"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can also pass the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"callbackUrl"}]},{"type":"text","value":" option to both the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"signIn"}]},{"type":"text","value":" and the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"signOut"}]},{"type":"text","value":" method. This allows you to redirect a user to a certain pages, after they've completed the action. This can be useful when a user attempts to open a page ("},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/protected"}]},{"type":"text","value":") but has to go through external authentication (e.g., via their google account) first."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can use it like:"}]},{"type":"element","tag":"code","props":{"code":"await signIn({ callbackUrl: '/protected' })\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"await signIn({ callbackUrl: '/protected' })\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"to redirect the user to the protected page they wanted to access "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"after"}]},{"type":"text","value":" they've been authenticated."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can do the same for signing out the user:"}]},{"type":"element","tag":"code","props":{"code":"await signOut({ callbackUrl: '/protected' })\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"await signOut({ callbackUrl: '/protected' })\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"E.g., here to redirect the user away from the already loaded, protected, page after signout (else, you will have to handle the redirect yourself)."}]},{"type":"element","tag":"h2","props":{"id":"middlewares"},"children":[{"type":"text","value":"Middlewares"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can use this library to define client-side middlewares. This library supports all of "},{"type":"element","tag":"a","props":{"href":"https://v3.nuxtjs.org/guide/directory-structure/middleware#middleware-directory","rel":["nofollow"]},"children":[{"type":"text","value":"nuxt's supported approaches"}]},{"type":"text","value":" to define client-side middlewares, read on to learn how."}]},{"type":"element","tag":"h3","props":{"id":"global-middlewares"},"children":[{"type":"text","value":"Global middlewares"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Create a global authentication middleware that ensures that your user is authenticated no matter which page they visit. For this create a file in the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"middlewares"}]},{"type":"text","value":" directory that has a "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".global.ts"}]},{"type":"text","value":" post-fix. It should look like this:"}]},{"type":"element","tag":"code","props":{"code":"// file: ~/middlewares/auth.global.ts\nimport { defineNuxtRouteMiddleware } from '#app'\nimport useSession from '~/composables/useSession'\n\nexport default defineNuxtRouteMiddleware(async () => {\n    await useSession()\n})\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// file: ~/middlewares/auth.global.ts\nimport { defineNuxtRouteMiddleware } from '#app'\nimport useSession from '~/composables/useSession'\n\nexport default defineNuxtRouteMiddleware(async () => {\n    await useSession()\n})\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"That's it! This middleware will fetch a session and if no active session exists for the current user redirect to the login screen. If you want to write custom redirect logic, you could alter the above code to only apply to specific routes. Here is a global middleware that protects only the routes that start with "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/secret/"}]},{"type":"text","value":":"}]},{"type":"element","tag":"code","props":{"code":"// file: ~/middlewares/auth.global.ts\nimport { defineNuxtRouteMiddleware } from '#app'\nimport useSession from '~/composables/useSession'\n\nexport default defineNuxtRouteMiddleware(async (to) => {\n  if (!to.path.startsWith('/secret/')) {\n    return\n  }\n  await useSession()\n})\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// file: ~/middlewares/auth.global.ts\nimport { defineNuxtRouteMiddleware } from '#app'\nimport useSession from '~/composables/useSession'\n\nexport default defineNuxtRouteMiddleware(async (to) => {\n  if (!to.path.startsWith('/secret/')) {\n    return\n  }\n  await useSession()\n})\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here's a middleware that redirects to a custom login page:"}]},{"type":"element","tag":"code","props":{"code":"// file: ~/middlewares/auth.global.ts\nimport { defineNuxtRouteMiddleware, navigateTo } from '#app'\nimport useSession from '~/composables/useSession'\n\nexport default defineNuxtRouteMiddleware(async (to) => {\n  // 1. Always allow access to the login page\n  if (to.path === '/login') {\n    return\n  }\n\n  // 2. Otherwise: Check status and redirect to login page\n  const { status } = await useSession({ required: false })\n  if (status.value !== 'authenticated') {\n    navigateTo('/login')\n  }\n})\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// file: ~/middlewares/auth.global.ts\nimport { defineNuxtRouteMiddleware, navigateTo } from '#app'\nimport useSession from '~/composables/useSession'\n\nexport default defineNuxtRouteMiddleware(async (to) => {\n  // 1. Always allow access to the login page\n  if (to.path === '/login') {\n    return\n  }\n\n  // 2. Otherwise: Check status and redirect to login page\n  const { status } = await useSession({ required: false })\n  if (status.value !== 'authenticated') {\n    navigateTo('/login')\n  }\n})\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"named-middlewares"},"children":[{"type":"text","value":"Named middlewares"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Named middlewares behave similar to "},{"type":"element","tag":"a","props":{"href":"#global-middleware"},"children":[{"type":"text","value":"global middlewares"}]},{"type":"text","value":" but are not automatically applied to any pages."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To use them, first create a middleware:"}]},{"type":"element","tag":"code","props":{"code":"// file: ~/middlewares/auth.ts\nimport { defineNuxtRouteMiddleware } from '#app'\nimport useSession from '~/composables/useSession'\n\nexport default defineNuxtRouteMiddleware(async () => {\n    await useSession()\n})\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// file: ~/middlewares/auth.ts\nimport { defineNuxtRouteMiddleware } from '#app'\nimport useSession from '~/composables/useSession'\n\nexport default defineNuxtRouteMiddleware(async () => {\n    await useSession()\n})\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note that there's no "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".global.ts"}]},{"type":"text","value":" postfix in the filename above! Then inside your pages use this middleware like this:"}]},{"type":"element","tag":"code","props":{"code":"<!-- file: ~/pages/protected.vue -->\n<template>\n  <div>I'm a secret!</div>\n</template>\n\n<script setup lang=\"ts\">\ndefinePageMeta({\n  middleware: ['auth']\n})\n</script>\n","language":"vue"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<!-- file: ~/pages/protected.vue -->\n<template>\n  <div>I'm a secret!</div>\n</template>\n\n<script setup lang=\"ts\">\ndefinePageMeta({\n  middleware: ['auth']\n})\n</script>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note: "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"definePageMeta"}]},{"type":"text","value":" can only be used inside the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"pages/"}]},{"type":"text","value":" directory!"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nuxt now calls the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"auth.ts"}]},{"type":"text","value":" middleware on every visit to this page."}]},{"type":"element","tag":"h3","props":{"id":"inline-middlewares"},"children":[{"type":"text","value":"Inline middlewares"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To define a named middleware, you need to use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"definePageMeta"}]},{"type":"text","value":" as described "},{"type":"element","tag":"a","props":{"href":"https://v3.nuxtjs.org/api/utils/define-page-meta/","rel":["nofollow"]},"children":[{"type":"text","value":"in the nuxt docs"}]},{"type":"text","value":". Then you can just call "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"useSession"}]},{"type":"text","value":" as in the other middlewares. Here's an example that would protect just the page itself:"}]},{"type":"element","tag":"code","props":{"code":"<!-- file: ~/pages/protected.vue -->\n<template>\n  <div>I'm a secret!</div>\n</template>\n\n<script setup lang=\"ts\">\ndefinePageMeta({\n  middleware: async () => {\n    await useSession()\n  }\n})\n</script>\n","language":"vue"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<!-- file: ~/pages/protected.vue -->\n<template>\n  <div>I'm a secret!</div>\n</template>\n\n<script setup lang=\"ts\">\ndefinePageMeta({\n  middleware: async () => {\n    await useSession()\n  }\n})\n</script>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note: "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"definePageMeta"}]},{"type":"text","value":" can only be used inside the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"pages/"}]},{"type":"text","value":" directory!"}]},{"type":"element","tag":"h2","props":{"id":"server-side-usage"},"children":[{"type":"text","value":"Server-side usage"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"On the server side you can get access to the current session like this:"}]},{"type":"element","tag":"code","props":{"code":"import { getServerSession } from '#sidebase/server'\n\nexport default eventHandler(async (event) => {\n  const session = await getServerSession(event)\n})\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { getServerSession } from '#sidebase/server'\n\nexport default eventHandler(async (event) => {\n  const session = await getServerSession(event)\n})\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This is inspired by "},{"type":"element","tag":"a","props":{"href":"https://next-auth.js.org/tutorials/securing-pages-and-api-routes#securing-api-routes","rel":["nofollow"]},"children":[{"type":"text","value":"the getServerSession"}]},{"type":"text","value":" of NextAuth.js. It also avoids an external, internet call to the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /api/auth/sessions"}]},{"type":"text","value":" endpoint, instead directly calling a pure JS-method."}]},{"type":"element","tag":"h3","props":{"id":"server-side-endpoint-protection"},"children":[{"type":"text","value":"Server-side endpoint protection"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To protect an endpoint with, check the session after fetching it:"}]},{"type":"element","tag":"code","props":{"code":"// file: ~/server/api/protected.get.ts\nimport { getServerSession } from '#sidebase/server'\n\nexport default eventHandler(async (event) => {\n  const session = await getServerSession(event)\n  if (!session) {\n    return { status: 'unauthenticated!' }\n  }\n  return { status: 'authenticated!' }\n})\n\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// file: ~/server/api/protected.get.ts\nimport { getServerSession } from '#sidebase/server'\n\nexport default eventHandler(async (event) => {\n  const session = await getServerSession(event)\n  if (!session) {\n    return { status: 'unauthenticated!' }\n  }\n  return { status: 'authenticated!' }\n})\n\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"server-side-middlewares"},"children":[{"type":"text","value":"Server-side middlewares"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can also use this in a "},{"type":"element","tag":"a","props":{"href":"https://v3.nuxtjs.org/guide/directory-structure/server#server-middleware","rel":["nofollow"]},"children":[{"type":"text","value":"nuxt server middleware"}]},{"type":"text","value":" to protect multiple pages at once and keep the authentication logic out of your endpoints:"}]},{"type":"element","tag":"code","props":{"code":"// file: ~/server/middleware/auth.ts\nimport { getServerSession } from '#sidebase/server'\n\nexport default eventHandler(async (event) => {\n  const session = await getServerSession(event)\n  if (!session) {\n    throw createError({ statusMessage: 'Unauthenticated', statusCode: 403 })\n  }\n})\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// file: ~/server/middleware/auth.ts\nimport { getServerSession } from '#sidebase/server'\n\nexport default eventHandler(async (event) => {\n  const session = await getServerSession(event)\n  if (!session) {\n    throw createError({ statusMessage: 'Unauthenticated', statusCode: 403 })\n  }\n})\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"rest-api"},"children":[{"type":"text","value":"REST API"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"All endpoints that NextAuth.js supports are also supported by "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt-auth"}]},{"type":"text","value":":"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /signin"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"POST /signin/:provider"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET/POST /callback/:provider"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /signout"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"POST /signout"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /session"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /csrf"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /providers"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can directly interact with them if you wish to, it's probably a better idea to use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"useSession"}]},{"type":"text","value":" where possible though. "},{"type":"element","tag":"a","props":{"href":"https://next-auth.js.org/getting-started/rest-api","rel":["nofollow"]},"children":[{"type":"text","value":"See the full rest API documentation of NextAuth.js here"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h2","props":{"id":"configuration"},"children":[{"type":"text","value":"Configuration"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here's what a full config can look like. Here we use a github-oauth provider to authenticate the user:"}]},{"type":"element","tag":"code","props":{"code":"import GithubProvider from 'next-auth/providers/github'\n\n{\n    // Module is enabled\n    isEnabled: true,\n    // Configure underlying next auht, use same structure as defined by NextAuth.js config: https://next-auth.js.org/configuration/options#options\n    nextAuth: {\n        // URL that the auth endpoints are reachable at\n        url: 'http://localhost:3000/api/auth/',\n        options: {\n            // Secret to use to encode JWT tokens, if `undefined` a default one is generated. Must be set in production!\n            secret: undefined,\n            // Configure providers that the application supports\n            providers: [GithubProvider({\n                clientId: 'enter-your-client-id-here',\n                clientSecret: 'enter-your-client-secret-here'\n            })],\n        }\n    }\n}\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import GithubProvider from 'next-auth/providers/github'\n\n{\n    // Module is enabled\n    isEnabled: true,\n    // Configure underlying next auht, use same structure as defined by NextAuth.js config: https://next-auth.js.org/configuration/options#options\n    nextAuth: {\n        // URL that the auth endpoints are reachable at\n        url: 'http://localhost:3000/api/auth/',\n        options: {\n            // Secret to use to encode JWT tokens, if `undefined` a default one is generated. Must be set in production!\n            secret: undefined,\n            // Configure providers that the application supports\n            providers: [GithubProvider({\n                clientId: 'enter-your-client-id-here',\n                clientSecret: 'enter-your-client-secret-here'\n            })],\n        }\n    }\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note that there's way more options inside the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nextAuth.options"}]},{"type":"text","value":" object, see "},{"type":"element","tag":"a","props":{"href":"https://next-auth.js.org/configuration/options#options","rel":["nofollow"]},"children":[{"type":"text","value":"here"}]},{"type":"text","value":" for all available options."}]},{"type":"element","tag":"h2","props":{"id":"prior-work-and-module-concept"},"children":[{"type":"text","value":"Prior Work and Module Concept"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The idea of this library is to re-use all the open-source implementation that already exist in the JS ecosystem instead of rolling our own. The idea was born when researching through the ecosystem of framework-specific authentication libraries to figure out what the best implementation approach for a state-of-the-art nuxt 3 authentication library would be."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"During research it became clear that implementing everything from scratch will be:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"a lot of work that has already been open-sourced by others,"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"error prone as authentication has a lot of intricacies that need to be resolved in order to get it right,"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"hard to maintain as authentication providers come and go,"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"hard to build initial trust for as authentication is important and cannot go wrong,"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In order to avoid these problems without taking forever (leaving nuxt without an authentication library in the meantime), we decided to investigate if we can wrap "},{"type":"element","tag":"a","props":{"href":"https://github.com/nextauthjs/next-auth","rel":["nofollow"]},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"NextAuth.js"}]}]},{"type":"text","value":", the most popular authentication library in the Next.js ecosystem by far and a trusted, well maintained one at that!"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In our investigation we found prior attempts to make NextAuth.js framework agnostic. These have more or less come to fruition, so far mostly resulting in some PoCs and example apps. Looking at these was quite helpful to get started. In particular, big pushes in the right direction came from:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/nextauthjs/next-auth/tree/main/apps","rel":["nofollow"]},"children":[{"type":"text","value":"NextAuth.js app examples"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/nextauthjs/next-auth/discussions/3942","rel":["nofollow"]},"children":[{"type":"text","value":"Various comments, proposals, ... of this thread"}]},{"type":"text","value":", special thanks to @brillout for starting the discussion, @balazsorban44 for NextAuth.js and encouraging the discussion, @wobsoriano for adding PoCs for multiple languages"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The main part of the work was to piece everything together, resolve some outstanding issues with existing PoCs, add new things where nothing existed yet, e.g., for the client "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"useSession"}]},{"type":"text","value":" composable by going through the NextAuth.js client code and translating it to a nuxt 3 approach."}]},{"type":"element","tag":"h3","props":{"id":"project-roadmap"},"children":[{"type":"text","value":"Project Roadmap"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"🚧 This project is in beta-status: we test things, a lot of features are not complete (but already useful!) - e.g., we have implemented and tested oauth, so all dozens of oauth flows should already work."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Roughly, the roadmap of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt-auth"}]},{"type":"text","value":" is:"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Reach feature parity: There's still a lot of options, configuration and behavior from the client-side NextAuth.js module that we do not support yet. We first want to reach feature parity on this front + support the credential and email flow - so far only the oauth flows have been properly tested"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Reach configuration & server-side parity: Extending the user data model, ensuring full typescript support in doing that, allowing correct configuration of all supported backends and session storage mediums"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Fill in missing gaps, add some of our own: There's many ideas we have to support extended user management, maybe discuss whether we want to better support the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"local"}]},{"type":"text","value":" / "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"credentials"}]},{"type":"text","value":" flow than NextAuth.js does out of the box (they don't do it for good reasons, so, there really is an honest discussion to be had), adding more UI focused components that automatically and easily wrap your app in a nice auth page, ..."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We also want to listen to all suggestions, feature requests, bug reports, ... from you. So if you have any ideas, please open an issue or reach out to us on Twitter or via E-Mail."}]},{"type":"element","tag":"h2","props":{"id":"development"},"children":[{"type":"text","value":"Development"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Run "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"npm run dev:prepare"}]},{"type":"text","value":" to generate type stubs."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"npm run dev"}]},{"type":"text","value":" to start "},{"type":"element","tag":"a","props":{"href":"./playground"},"children":[{"type":"text","value":"the module playground"}]},{"type":"text","value":" in development mode."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Run "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"npm run lint"}]},{"type":"text","value":" to run eslint"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Run "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"npm run type"}]},{"type":"text","value":" to run typescheck via tsc"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Run "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"npm publish --access public"}]},{"type":"text","value":" to publish (bump version before)"}]}]}]},"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"quick-start"},"children":[{"type":"text","value":"Quick Start"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Install the package:"},{"type":"element","tag":"code","props":{"code":"npm i -D @sidebase/nuxt-auth\n","language":"sh"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npm i -D @sidebase/nuxt-auth\n"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Add the package to your "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt.config.ts"}]},{"type":"text","value":":"},{"type":"element","tag":"code","props":{"code":"export default defineNuxtConfig({\n  modules: ['@sidebase/nuxt-auth'],\n})\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"export default defineNuxtConfig({\n  modules: ['@sidebase/nuxt-auth'],\n})\n"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Configure the module with at least one "},{"type":"element","tag":"a","props":{"href":"https://next-auth.js.org/providers/","rel":["nofollow"]},"children":[{"type":"text","value":"authentication provider"}]},{"type":"text","value":":"},{"type":"element","tag":"code","props":{"code":"import GithubProvider from 'next-auth/providers/github'\n\nexport default defineNuxtConfig({\n  modules: ['@sidebase/nuxt-auth'],\n  auth: {\n    nextAuth: {\n      options: {\n        providers: [GithubProvider({ clientId: 'enter-your-client-id-here', clientSecret: 'enter-your-client-secret-here' })]\n      }\n    }\n  }\n})\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import GithubProvider from 'next-auth/providers/github'\n\nexport default defineNuxtConfig({\n  modules: ['@sidebase/nuxt-auth'],\n  auth: {\n    nextAuth: {\n      options: {\n        providers: [GithubProvider({ clientId: 'enter-your-client-id-here', clientSecret: 'enter-your-client-secret-here' })]\n      }\n    }\n  }\n})\n"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Done! You can now use all user-related functionality, for example:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"client-side (e.g., from "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".vue"}]},{"type":"text","value":" files):"},{"type":"element","tag":"code","props":{"code":"const {\n  status,\n  data,\n  signIn,\n  signOut,\n} = await useSession({\n  // Whether a session is required. If it is, a redirect to the signin page will happen if no active session exists\n  required: true\n})\n\n// Session status: `unauthenticated`, `loading`, `authenticated`\nstatus.value\n\n// Session data, e.g., expiration, user.email, ...\ndata.value\n\n// Start the unbranded sign-in flow\nawait signIn()\n\n// Logout the user\nawait signOut()\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const {\n  status,\n  data,\n  signIn,\n  signOut,\n} = await useSession({\n  // Whether a session is required. If it is, a redirect to the signin page will happen if no active session exists\n  required: true\n})\n\n// Session status: `unauthenticated`, `loading`, `authenticated`\nstatus.value\n\n// Session data, e.g., expiration, user.email, ...\ndata.value\n\n// Start the unbranded sign-in flow\nawait signIn()\n\n// Logout the user\nawait signOut()\n"}]}]}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"There's more supported methods in the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"useSession"}]},{"type":"text","value":" composable, you can create authentication middlewares for your app and more - read the documentation below."}]},{"type":"element","tag":"h1","props":{"id":"features"},"children":[{"type":"text","value":"Features"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt-auth"}]},{"type":"text","value":" is still under active development. The goal of this library is to reach feature-parity with "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"NextAuth.js"}]},{"type":"text","value":". Currently, the library supports:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"✔️ Client Library:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"useSession"}]},{"type":"text","value":" composable to: "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"signIn"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"signOut"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"getCsrfToken"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"getProviders"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"getSession"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"full typescript support for all methods and property"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"✔️ REST API:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /signin"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"POST /signin/:provider"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET/POST /callback/:provider"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /signout"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"POST /signout"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /session"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /csrf"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /providers"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"✔️ Persistent sessions across requests"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"✔️ Client-side middleware protection"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"✔️ Server-side middleware and endpoint protection"}]}]},{"type":"element","tag":"h1","props":{"id":"demo-page"},"children":[{"type":"text","value":"Demo Page"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Visit the "},{"type":"element","tag":"a","props":{"href":"https://nuxt-auth-example.sidebase.io/","rel":["nofollow"]},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt-auth"}]},{"type":"text","value":" demo page here"}]},{"type":"text","value":":\n"},{"type":"element","tag":"a","props":{"href":"https://nuxt-auth-example.sidebase.io/","rel":["nofollow"]},"children":[{"type":"element","tag":"img","props":{"alt":"nuxt-auth demo page","src":"./.github/nuxt-auth-demo.png"},"children":[]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can find the "},{"type":"element","tag":"a","props":{"href":"https://github.com/sidebase/nuxt-auth-example","rel":["nofollow"]},"children":[{"type":"text","value":"full source code here"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h2","props":{"id":"module-playground"},"children":[{"type":"text","value":"Module Playground"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This module also has it's own playground, you can also use that to get familiar with it and play around a bit:"}]},{"type":"element","tag":"code","props":{"code":"> git clone https://github.com/sidebase/nuxt-auth\n\n> cd nuxt-auth\n\n# **OPEN THE `nuxt.config.ts` and configure your authentication provider (e.g., google, github)**\n\n> npm i\n\n> npm run dev:prepare\n\n> npm run dev\n\n# -> open http://localhost:3000\n","language":"sh"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"> git clone https://github.com/sidebase/nuxt-auth\n\n> cd nuxt-auth\n\n# **OPEN THE `nuxt.config.ts` and configure your authentication provider (e.g., google, github)**\n\n> npm i\n\n> npm run dev:prepare\n\n> npm run dev\n\n# -> open http://localhost:3000\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note: The playground has considerably less polishing than the example page."}]},{"type":"element","tag":"h1","props":{"id":"documentation"},"children":[{"type":"text","value":"Documentation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"First of all: If you want to have an interactive look, either check-out the "},{"type":"element","tag":"a","props":{"href":"#demo-page"},"children":[{"type":"text","value":"demo page"}]},{"type":"text","value":" or the "},{"type":"element","tag":"a","props":{"href":"#module-playground"},"children":[{"type":"text","value":"module playground"}]},{"type":"text","value":" in the sections above."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt-auth"}]},{"type":"text","value":" module takes care of authentication and sessions:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"authentication: The process of ensuring that somebody is who they claims to be. This is like a passport check at the border: You present some sort of proof that 100% tells the checking entity that you are who you claim to be (typically, this is your passport). The border agents checks the passport and let's you through."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"sessions: Persist the information that you have been authenticated for some duration across different requests. Additional data can be attached to a session, e.g., via the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"mail"}]},{"type":"text","value":" or "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"username"}]},{"type":"text","value":" that may be part of data attached to the session. Note: If you need only sessions but no authentication, you can check-out "},{"type":"element","tag":"a","props":{"href":"https://github.com/sidebase/nuxt-session","rel":["nofollow"]},"children":[{"type":"text","value":"nuxt-session"}]},{"type":"text","value":"."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In addition, you can use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt-auth"}]},{"type":"text","value":" to build authorization on top of the supported authentication + session mechanisms: As soon as you know \"whos who\", you can use this information to let somebody with the right email adress (for example) into a specific area. Right now, this is not supported out of the box."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Below we describe:"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#client-side-usage"},"children":[{"type":"text","value":"Client-side usage"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#session-access-and-manipulation"},"children":[{"type":"text","value":"Session access and manipulation"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#redirects"},"children":[{"type":"text","value":"Redirects"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#middlewares"},"children":[{"type":"text","value":"Middlewares"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#global-middlewares"},"children":[{"type":"text","value":"Global middlewares"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#named-middlewares"},"children":[{"type":"text","value":"Named middlewares"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#inline-middlewares"},"children":[{"type":"text","value":"Inline middlewares"}]}]}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#server-side-usage"},"children":[{"type":"text","value":"Server-side usage"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#server-side-endpoint-protection"},"children":[{"type":"text","value":"Server-side endpoint protection"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#server-side-middlewares"},"children":[{"type":"text","value":"Server-side middlewares"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#rest-api"},"children":[{"type":"text","value":"REST API"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#configuration"},"children":[{"type":"text","value":"Configuration"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#prior-work-and-module-concept"},"children":[{"type":"text","value":"Prior Work and Module Concept"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#project-roadmap"},"children":[{"type":"text","value":"Project Roadmap"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#development"},"children":[{"type":"text","value":"Development"}]}]}]},{"type":"element","tag":"h2","props":{"id":"client-side-usage"},"children":[{"type":"text","value":"Client-side usage"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This module allows you user-data access, signing in, signing out and more on the client-side "},{"type":"element","tag":"a","props":{"href":"#session-access-and-manipulation"},"children":[{"type":"text","value":"via "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"useSession"}]}]},{"type":"text","value":". It also allows you to defined "},{"type":"element","tag":"a","props":{"href":"#middlewares"},"children":[{"type":"text","value":"middlewares that protects your page"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h2","props":{"id":"session-access-and-manipulation"},"children":[{"type":"text","value":"Session access and manipulation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"useSession"}]},{"type":"text","value":" composable is your main gateway to accessing and manipulating session-state and data. Here's the main methdos you can use:"}]},{"type":"element","tag":"code","props":{"code":"const {\n  status,\n  data,\n  getCsrfToken,\n  getProviders,\n  getSession,\n  signIn,\n  signOut,\n} = await useSession({\n  // Whether a session is required. If it is, a redirect to the signin page will happen if no active session exists\n  required: true\n})\n\n// Session status, either `unauthenticated`, `loading`, `authenticated`, see https://next-auth.js.org/getting-started/client#signout\nstatus.value\n\n// Session data, either `undefined` (= authentication not attempted), `null` (= user unauthenticated), `loading` (= session loading in progress), see https://next-auth.js.org/getting-started/client#signout\ndata.value\n\n// Get / Reload the current session from the server, pass `{ required: true }` to force a login if no session exists, see https://next-auth.js.org/getting-started/client#getsession\nawait getSession()\n\n// Get the current CSRF token, usually you do not need this function, see https://next-auth.js.org/getting-started/client#signout\nawait getCsrfToken()\n\n// Get the supported providers, e.g., to build your own login page, see https://next-auth.js.org/getting-started/client#getproviders\nawait getProviders()\n\n// Trigger a sign in, see https://next-auth.js.org/getting-started/client#signin\nawait signIn()\n\n// Trigger a sign out, see https://next-auth.js.org/getting-started/client#signout\nawait signOut()\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const {\n  status,\n  data,\n  getCsrfToken,\n  getProviders,\n  getSession,\n  signIn,\n  signOut,\n} = await useSession({\n  // Whether a session is required. If it is, a redirect to the signin page will happen if no active session exists\n  required: true\n})\n\n// Session status, either `unauthenticated`, `loading`, `authenticated`, see https://next-auth.js.org/getting-started/client#signout\nstatus.value\n\n// Session data, either `undefined` (= authentication not attempted), `null` (= user unauthenticated), `loading` (= session loading in progress), see https://next-auth.js.org/getting-started/client#signout\ndata.value\n\n// Get / Reload the current session from the server, pass `{ required: true }` to force a login if no session exists, see https://next-auth.js.org/getting-started/client#getsession\nawait getSession()\n\n// Get the current CSRF token, usually you do not need this function, see https://next-auth.js.org/getting-started/client#signout\nawait getCsrfToken()\n\n// Get the supported providers, e.g., to build your own login page, see https://next-auth.js.org/getting-started/client#getproviders\nawait getProviders()\n\n// Trigger a sign in, see https://next-auth.js.org/getting-started/client#signin\nawait signIn()\n\n// Trigger a sign out, see https://next-auth.js.org/getting-started/client#signout\nawait signOut()\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Session "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" has the following interface:"}]},{"type":"element","tag":"code","props":{"code":"interface DefaultSession {\n    user?: {\n        name?: string | null;\n        email?: string | null;\n        image?: string | null;\n    };\n    expires: ISODateString;\n}\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"interface DefaultSession {\n    user?: {\n        name?: string | null;\n        email?: string | null;\n        image?: string | null;\n    };\n    expires: ISODateString;\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note that this is only set when the use is logged-in and when the provider used to login the user provides the fields."}]},{"type":"element","tag":"h3","props":{"id":"redirects"},"children":[{"type":"text","value":"Redirects"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can also pass the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"callbackUrl"}]},{"type":"text","value":" option to both the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"signIn"}]},{"type":"text","value":" and the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"signOut"}]},{"type":"text","value":" method. This allows you to redirect a user to a certain pages, after they've completed the action. This can be useful when a user attempts to open a page ("},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/protected"}]},{"type":"text","value":") but has to go through external authentication (e.g., via their google account) first."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can use it like:"}]},{"type":"element","tag":"code","props":{"code":"await signIn({ callbackUrl: '/protected' })\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"await signIn({ callbackUrl: '/protected' })\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"to redirect the user to the protected page they wanted to access "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"after"}]},{"type":"text","value":" they've been authenticated."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can do the same for signing out the user:"}]},{"type":"element","tag":"code","props":{"code":"await signOut({ callbackUrl: '/protected' })\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"await signOut({ callbackUrl: '/protected' })\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"E.g., here to redirect the user away from the already loaded, protected, page after signout (else, you will have to handle the redirect yourself)."}]},{"type":"element","tag":"h2","props":{"id":"middlewares"},"children":[{"type":"text","value":"Middlewares"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can use this library to define client-side middlewares. This library supports all of "},{"type":"element","tag":"a","props":{"href":"https://v3.nuxtjs.org/guide/directory-structure/middleware#middleware-directory","rel":["nofollow"]},"children":[{"type":"text","value":"nuxt's supported approaches"}]},{"type":"text","value":" to define client-side middlewares, read on to learn how."}]},{"type":"element","tag":"h3","props":{"id":"global-middlewares"},"children":[{"type":"text","value":"Global middlewares"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Create a global authentication middleware that ensures that your user is authenticated no matter which page they visit. For this create a file in the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"middlewares"}]},{"type":"text","value":" directory that has a "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".global.ts"}]},{"type":"text","value":" post-fix. It should look like this:"}]},{"type":"element","tag":"code","props":{"code":"// file: ~/middlewares/auth.global.ts\nimport { defineNuxtRouteMiddleware } from '#app'\nimport useSession from '~/composables/useSession'\n\nexport default defineNuxtRouteMiddleware(async () => {\n    await useSession()\n})\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// file: ~/middlewares/auth.global.ts\nimport { defineNuxtRouteMiddleware } from '#app'\nimport useSession from '~/composables/useSession'\n\nexport default defineNuxtRouteMiddleware(async () => {\n    await useSession()\n})\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"That's it! This middleware will fetch a session and if no active session exists for the current user redirect to the login screen. If you want to write custom redirect logic, you could alter the above code to only apply to specific routes. Here is a global middleware that protects only the routes that start with "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/secret/"}]},{"type":"text","value":":"}]},{"type":"element","tag":"code","props":{"code":"// file: ~/middlewares/auth.global.ts\nimport { defineNuxtRouteMiddleware } from '#app'\nimport useSession from '~/composables/useSession'\n\nexport default defineNuxtRouteMiddleware(async (to) => {\n  if (!to.path.startsWith('/secret/')) {\n    return\n  }\n  await useSession()\n})\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// file: ~/middlewares/auth.global.ts\nimport { defineNuxtRouteMiddleware } from '#app'\nimport useSession from '~/composables/useSession'\n\nexport default defineNuxtRouteMiddleware(async (to) => {\n  if (!to.path.startsWith('/secret/')) {\n    return\n  }\n  await useSession()\n})\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here's a middleware that redirects to a custom login page:"}]},{"type":"element","tag":"code","props":{"code":"// file: ~/middlewares/auth.global.ts\nimport { defineNuxtRouteMiddleware, navigateTo } from '#app'\nimport useSession from '~/composables/useSession'\n\nexport default defineNuxtRouteMiddleware(async (to) => {\n  // 1. Always allow access to the login page\n  if (to.path === '/login') {\n    return\n  }\n\n  // 2. Otherwise: Check status and redirect to login page\n  const { status } = await useSession({ required: false })\n  if (status.value !== 'authenticated') {\n    navigateTo('/login')\n  }\n})\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// file: ~/middlewares/auth.global.ts\nimport { defineNuxtRouteMiddleware, navigateTo } from '#app'\nimport useSession from '~/composables/useSession'\n\nexport default defineNuxtRouteMiddleware(async (to) => {\n  // 1. Always allow access to the login page\n  if (to.path === '/login') {\n    return\n  }\n\n  // 2. Otherwise: Check status and redirect to login page\n  const { status } = await useSession({ required: false })\n  if (status.value !== 'authenticated') {\n    navigateTo('/login')\n  }\n})\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"named-middlewares"},"children":[{"type":"text","value":"Named middlewares"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Named middlewares behave similar to "},{"type":"element","tag":"a","props":{"href":"#global-middleware"},"children":[{"type":"text","value":"global middlewares"}]},{"type":"text","value":" but are not automatically applied to any pages."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To use them, first create a middleware:"}]},{"type":"element","tag":"code","props":{"code":"// file: ~/middlewares/auth.ts\nimport { defineNuxtRouteMiddleware } from '#app'\nimport useSession from '~/composables/useSession'\n\nexport default defineNuxtRouteMiddleware(async () => {\n    await useSession()\n})\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// file: ~/middlewares/auth.ts\nimport { defineNuxtRouteMiddleware } from '#app'\nimport useSession from '~/composables/useSession'\n\nexport default defineNuxtRouteMiddleware(async () => {\n    await useSession()\n})\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note that there's no "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".global.ts"}]},{"type":"text","value":" postfix in the filename above! Then inside your pages use this middleware like this:"}]},{"type":"element","tag":"code","props":{"code":"<!-- file: ~/pages/protected.vue -->\n<template>\n  <div>I'm a secret!</div>\n</template>\n\n<script setup lang=\"ts\">\ndefinePageMeta({\n  middleware: ['auth']\n})\n</script>\n","language":"vue"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<!-- file: ~/pages/protected.vue -->\n<template>\n  <div>I'm a secret!</div>\n</template>\n\n<script setup lang=\"ts\">\ndefinePageMeta({\n  middleware: ['auth']\n})\n</script>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note: "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"definePageMeta"}]},{"type":"text","value":" can only be used inside the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"pages/"}]},{"type":"text","value":" directory!"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nuxt now calls the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"auth.ts"}]},{"type":"text","value":" middleware on every visit to this page."}]},{"type":"element","tag":"h3","props":{"id":"inline-middlewares"},"children":[{"type":"text","value":"Inline middlewares"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To define a named middleware, you need to use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"definePageMeta"}]},{"type":"text","value":" as described "},{"type":"element","tag":"a","props":{"href":"https://v3.nuxtjs.org/api/utils/define-page-meta/","rel":["nofollow"]},"children":[{"type":"text","value":"in the nuxt docs"}]},{"type":"text","value":". Then you can just call "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"useSession"}]},{"type":"text","value":" as in the other middlewares. Here's an example that would protect just the page itself:"}]},{"type":"element","tag":"code","props":{"code":"<!-- file: ~/pages/protected.vue -->\n<template>\n  <div>I'm a secret!</div>\n</template>\n\n<script setup lang=\"ts\">\ndefinePageMeta({\n  middleware: async () => {\n    await useSession()\n  }\n})\n</script>\n","language":"vue"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<!-- file: ~/pages/protected.vue -->\n<template>\n  <div>I'm a secret!</div>\n</template>\n\n<script setup lang=\"ts\">\ndefinePageMeta({\n  middleware: async () => {\n    await useSession()\n  }\n})\n</script>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note: "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"definePageMeta"}]},{"type":"text","value":" can only be used inside the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"pages/"}]},{"type":"text","value":" directory!"}]},{"type":"element","tag":"h2","props":{"id":"server-side-usage"},"children":[{"type":"text","value":"Server-side usage"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"On the server side you can get access to the current session like this:"}]},{"type":"element","tag":"code","props":{"code":"import { getServerSession } from '#sidebase/server'\n\nexport default eventHandler(async (event) => {\n  const session = await getServerSession(event)\n})\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { getServerSession } from '#sidebase/server'\n\nexport default eventHandler(async (event) => {\n  const session = await getServerSession(event)\n})\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This is inspired by "},{"type":"element","tag":"a","props":{"href":"https://next-auth.js.org/tutorials/securing-pages-and-api-routes#securing-api-routes","rel":["nofollow"]},"children":[{"type":"text","value":"the getServerSession"}]},{"type":"text","value":" of NextAuth.js. It also avoids an external, internet call to the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /api/auth/sessions"}]},{"type":"text","value":" endpoint, instead directly calling a pure JS-method."}]},{"type":"element","tag":"h3","props":{"id":"server-side-endpoint-protection"},"children":[{"type":"text","value":"Server-side endpoint protection"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To protect an endpoint with, check the session after fetching it:"}]},{"type":"element","tag":"code","props":{"code":"// file: ~/server/api/protected.get.ts\nimport { getServerSession } from '#sidebase/server'\n\nexport default eventHandler(async (event) => {\n  const session = await getServerSession(event)\n  if (!session) {\n    return { status: 'unauthenticated!' }\n  }\n  return { status: 'authenticated!' }\n})\n\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// file: ~/server/api/protected.get.ts\nimport { getServerSession } from '#sidebase/server'\n\nexport default eventHandler(async (event) => {\n  const session = await getServerSession(event)\n  if (!session) {\n    return { status: 'unauthenticated!' }\n  }\n  return { status: 'authenticated!' }\n})\n\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"server-side-middlewares"},"children":[{"type":"text","value":"Server-side middlewares"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can also use this in a "},{"type":"element","tag":"a","props":{"href":"https://v3.nuxtjs.org/guide/directory-structure/server#server-middleware","rel":["nofollow"]},"children":[{"type":"text","value":"nuxt server middleware"}]},{"type":"text","value":" to protect multiple pages at once and keep the authentication logic out of your endpoints:"}]},{"type":"element","tag":"code","props":{"code":"// file: ~/server/middleware/auth.ts\nimport { getServerSession } from '#sidebase/server'\n\nexport default eventHandler(async (event) => {\n  const session = await getServerSession(event)\n  if (!session) {\n    throw createError({ statusMessage: 'Unauthenticated', statusCode: 403 })\n  }\n})\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// file: ~/server/middleware/auth.ts\nimport { getServerSession } from '#sidebase/server'\n\nexport default eventHandler(async (event) => {\n  const session = await getServerSession(event)\n  if (!session) {\n    throw createError({ statusMessage: 'Unauthenticated', statusCode: 403 })\n  }\n})\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"rest-api"},"children":[{"type":"text","value":"REST API"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"All endpoints that NextAuth.js supports are also supported by "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt-auth"}]},{"type":"text","value":":"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /signin"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"POST /signin/:provider"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET/POST /callback/:provider"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /signout"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"POST /signout"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /session"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /csrf"}]},{"type":"text","value":","}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"GET /providers"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can directly interact with them if you wish to, it's probably a better idea to use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"useSession"}]},{"type":"text","value":" where possible though. "},{"type":"element","tag":"a","props":{"href":"https://next-auth.js.org/getting-started/rest-api","rel":["nofollow"]},"children":[{"type":"text","value":"See the full rest API documentation of NextAuth.js here"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h2","props":{"id":"configuration"},"children":[{"type":"text","value":"Configuration"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here's what a full config can look like. Here we use a github-oauth provider to authenticate the user:"}]},{"type":"element","tag":"code","props":{"code":"import GithubProvider from 'next-auth/providers/github'\n\n{\n    // Module is enabled\n    isEnabled: true,\n    // Configure underlying next auht, use same structure as defined by NextAuth.js config: https://next-auth.js.org/configuration/options#options\n    nextAuth: {\n        // URL that the auth endpoints are reachable at\n        url: 'http://localhost:3000/api/auth/',\n        options: {\n            // Secret to use to encode JWT tokens, if `undefined` a default one is generated. Must be set in production!\n            secret: undefined,\n            // Configure providers that the application supports\n            providers: [GithubProvider({\n                clientId: 'enter-your-client-id-here',\n                clientSecret: 'enter-your-client-secret-here'\n            })],\n        }\n    }\n}\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import GithubProvider from 'next-auth/providers/github'\n\n{\n    // Module is enabled\n    isEnabled: true,\n    // Configure underlying next auht, use same structure as defined by NextAuth.js config: https://next-auth.js.org/configuration/options#options\n    nextAuth: {\n        // URL that the auth endpoints are reachable at\n        url: 'http://localhost:3000/api/auth/',\n        options: {\n            // Secret to use to encode JWT tokens, if `undefined` a default one is generated. Must be set in production!\n            secret: undefined,\n            // Configure providers that the application supports\n            providers: [GithubProvider({\n                clientId: 'enter-your-client-id-here',\n                clientSecret: 'enter-your-client-secret-here'\n            })],\n        }\n    }\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note that there's way more options inside the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nextAuth.options"}]},{"type":"text","value":" object, see "},{"type":"element","tag":"a","props":{"href":"https://next-auth.js.org/configuration/options#options","rel":["nofollow"]},"children":[{"type":"text","value":"here"}]},{"type":"text","value":" for all available options."}]},{"type":"element","tag":"h2","props":{"id":"prior-work-and-module-concept"},"children":[{"type":"text","value":"Prior Work and Module Concept"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The idea of this library is to re-use all the open-source implementation that already exist in the JS ecosystem instead of rolling our own. The idea was born when researching through the ecosystem of framework-specific authentication libraries to figure out what the best implementation approach for a state-of-the-art nuxt 3 authentication library would be."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"During research it became clear that implementing everything from scratch will be:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"a lot of work that has already been open-sourced by others,"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"error prone as authentication has a lot of intricacies that need to be resolved in order to get it right,"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"hard to maintain as authentication providers come and go,"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"hard to build initial trust for as authentication is important and cannot go wrong,"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In order to avoid these problems without taking forever (leaving nuxt without an authentication library in the meantime), we decided to investigate if we can wrap "},{"type":"element","tag":"a","props":{"href":"https://github.com/nextauthjs/next-auth","rel":["nofollow"]},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"NextAuth.js"}]}]},{"type":"text","value":", the most popular authentication library in the Next.js ecosystem by far and a trusted, well maintained one at that!"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In our investigation we found prior attempts to make NextAuth.js framework agnostic. These have more or less come to fruition, so far mostly resulting in some PoCs and example apps. Looking at these was quite helpful to get started. In particular, big pushes in the right direction came from:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/nextauthjs/next-auth/tree/main/apps","rel":["nofollow"]},"children":[{"type":"text","value":"NextAuth.js app examples"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/nextauthjs/next-auth/discussions/3942","rel":["nofollow"]},"children":[{"type":"text","value":"Various comments, proposals, ... of this thread"}]},{"type":"text","value":", special thanks to @brillout for starting the discussion, @balazsorban44 for NextAuth.js and encouraging the discussion, @wobsoriano for adding PoCs for multiple languages"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The main part of the work was to piece everything together, resolve some outstanding issues with existing PoCs, add new things where nothing existed yet, e.g., for the client "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"useSession"}]},{"type":"text","value":" composable by going through the NextAuth.js client code and translating it to a nuxt 3 approach."}]},{"type":"element","tag":"h3","props":{"id":"project-roadmap"},"children":[{"type":"text","value":"Project Roadmap"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"🚧 This project is in beta-status: we test things, a lot of features are not complete (but already useful!) - e.g., we have implemented and tested oauth, so all dozens of oauth flows should already work."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Roughly, the roadmap of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt-auth"}]},{"type":"text","value":" is:"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Reach feature parity: There's still a lot of options, configuration and behavior from the client-side NextAuth.js module that we do not support yet. We first want to reach feature parity on this front + support the credential and email flow - so far only the oauth flows have been properly tested"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Reach configuration & server-side parity: Extending the user data model, ensuring full typescript support in doing that, allowing correct configuration of all supported backends and session storage mediums"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Fill in missing gaps, add some of our own: There's many ideas we have to support extended user management, maybe discuss whether we want to better support the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"local"}]},{"type":"text","value":" / "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"credentials"}]},{"type":"text","value":" flow than NextAuth.js does out of the box (they don't do it for good reasons, so, there really is an honest discussion to be had), adding more UI focused components that automatically and easily wrap your app in a nice auth page, ..."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We also want to listen to all suggestions, feature requests, bug reports, ... from you. So if you have any ideas, please open an issue or reach out to us on Twitter or via E-Mail."}]},{"type":"element","tag":"h2","props":{"id":"development"},"children":[{"type":"text","value":"Development"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Run "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"npm run dev:prepare"}]},{"type":"text","value":" to generate type stubs."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"npm run dev"}]},{"type":"text","value":" to start "},{"type":"element","tag":"a","props":{"href":"./playground"},"children":[{"type":"text","value":"the module playground"}]},{"type":"text","value":" in development mode."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Run "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"npm run lint"}]},{"type":"text","value":" to run eslint"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Run "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"npm run type"}]},{"type":"text","value":" to run typescheck via tsc"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Run "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"npm publish --access public"}]},{"type":"text","value":" to publish (bump version before)"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"module-playground","depth":2,"text":"Module Playground"},{"id":"client-side-usage","depth":2,"text":"Client-side usage"},{"id":"session-access-and-manipulation","depth":2,"text":"Session access and manipulation","children":[{"id":"redirects","depth":3,"text":"Redirects"}]},{"id":"middlewares","depth":2,"text":"Middlewares","children":[{"id":"global-middlewares","depth":3,"text":"Global middlewares"},{"id":"named-middlewares","depth":3,"text":"Named middlewares"},{"id":"inline-middlewares","depth":3,"text":"Inline middlewares"}]},{"id":"server-side-usage","depth":2,"text":"Server-side usage","children":[{"id":"server-side-endpoint-protection","depth":3,"text":"Server-side endpoint protection"},{"id":"server-side-middlewares","depth":3,"text":"Server-side middlewares"}]},{"id":"rest-api","depth":2,"text":"REST API"},{"id":"configuration","depth":2,"text":"Configuration"},{"id":"prior-work-and-module-concept","depth":2,"text":"Prior Work and Module Concept","children":[{"id":"project-roadmap","depth":3,"text":"Project Roadmap"}]},{"id":"development","depth":2,"text":"Development"}]}},"_type":"markdown","_id":"content:nuxt-auth.md","_source":"content","_file":"nuxt-auth.md","_extension":"md"}