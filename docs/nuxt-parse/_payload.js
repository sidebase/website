export default (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at){return {data:{"content-query-5WYHZk9le2":{_path:"\u002Fnuxt-parse",_draft:z,_partial:z,_locale:"en",_empty:z,title:A,description:f,excerpt:{type:B,children:[{type:a,tag:l,props:{id:C},children:[{type:b,value:A}]},{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:D},{type:a,tag:n,props:{href:q,rel:[o]},children:[{type:a,tag:d,props:{},children:[{type:b,value:r}]}]}]},{type:a,tag:c,props:{},children:[{type:b,value:E}]},{type:a,tag:c,props:{},children:[{type:b,value:F}]}]},{type:a,tag:l,props:{id:G},children:[{type:b,value:H}]},{type:a,tag:e,props:{code:s,language:I},children:[{type:a,tag:g,props:{},children:[{type:a,tag:e,props:{__ignoreMap:f},children:[{type:b,value:s}]}]}]},{type:a,tag:p,props:{},children:[{type:b,value:J}]},{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:K},{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:L},{type:a,tag:e,props:{code:t,language:i},children:[{type:a,tag:g,props:{},children:[{type:a,tag:e,props:{__ignoreMap:f},children:[{type:b,value:t}]}]}]}]},{type:a,tag:c,props:{},children:[{type:b,value:M},{type:a,tag:e,props:{code:u,language:i},children:[{type:a,tag:g,props:{},children:[{type:a,tag:e,props:{__ignoreMap:f},children:[{type:b,value:u}]}]}]}]}]}]},{type:a,tag:c,props:{},children:[{type:b,value:N},{type:a,tag:e,props:{code:v,language:i},children:[{type:a,tag:g,props:{},children:[{type:a,tag:e,props:{__ignoreMap:f},children:[{type:b,value:v}]}]}]}]},{type:a,tag:c,props:{},children:[{type:b,value:O},{type:a,tag:e,props:{code:w,language:i},children:[{type:a,tag:g,props:{},children:[{type:a,tag:e,props:{__ignoreMap:f},children:[{type:b,value:w}]}]}]}]},{type:a,tag:c,props:{},children:[{type:b,value:P},{type:a,tag:e,props:{code:x,language:i},children:[{type:a,tag:g,props:{},children:[{type:a,tag:e,props:{__ignoreMap:f},children:[{type:b,value:x}]}]}]}]}]},{type:a,tag:l,props:{id:Q},children:[{type:b,value:R}]},{type:a,tag:p,props:{},children:[{type:b,value:S},{type:a,tag:n,props:{href:y,rel:[o]},children:[{type:b,value:y}]}]},{type:a,tag:p,props:{},children:[{type:b,value:T}]},{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:U}]},{type:b,value:V},{type:a,tag:d,props:{},children:[{type:b,value:j}]},{type:b,value:k}]},{type:a,tag:c,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:W}]},{type:b,value:X},{type:a,tag:d,props:{},children:[{type:b,value:j}]},{type:b,value:k}]},{type:a,tag:c,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:Y}]},{type:b,value:Z},{type:a,tag:d,props:{},children:[{type:b,value:j}]},{type:b,value:k}]},{type:a,tag:c,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:_}]},{type:b,value:$},{type:a,tag:d,props:{},children:[{type:b,value:j}]},{type:b,value:k}]},{type:a,tag:c,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:aa}]},{type:b,value:ab},{type:a,tag:d,props:{},children:[{type:b,value:j}]},{type:b,value:k}]},{type:a,tag:c,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:ac}]},{type:b,value:ad}]},{type:a,tag:c,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:ae}]},{type:b,value:af}]},{type:a,tag:c,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:ag}]},{type:b,value:ah},{type:a,tag:n,props:{href:q,rel:[o]},children:[{type:a,tag:d,props:{},children:[{type:b,value:r}]}]},{type:b,value:ai}]}]},{type:a,tag:l,props:{id:aj},children:[{type:b,value:ak}]},{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:m},{type:a,tag:d,props:{},children:[{type:b,value:al}]},{type:b,value:am}]},{type:a,tag:c,props:{},children:[{type:b,value:m},{type:a,tag:d,props:{},children:[{type:b,value:an}]},{type:b,value:ao}]},{type:a,tag:c,props:{},children:[{type:b,value:m},{type:a,tag:d,props:{},children:[{type:b,value:ap}]},{type:b,value:aq}]},{type:a,tag:c,props:{},children:[{type:b,value:m},{type:a,tag:d,props:{},children:[{type:b,value:ar}]},{type:b,value:as}]}]}]},body:{type:B,children:[{type:a,tag:l,props:{id:C},children:[{type:b,value:A}]},{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:D},{type:a,tag:n,props:{href:q,rel:[o]},children:[{type:a,tag:d,props:{},children:[{type:b,value:r}]}]}]},{type:a,tag:c,props:{},children:[{type:b,value:E}]},{type:a,tag:c,props:{},children:[{type:b,value:F}]}]},{type:a,tag:l,props:{id:G},children:[{type:b,value:H}]},{type:a,tag:e,props:{code:s,language:I},children:[{type:a,tag:g,props:{},children:[{type:a,tag:e,props:{__ignoreMap:f},children:[{type:b,value:s}]}]}]},{type:a,tag:p,props:{},children:[{type:b,value:J}]},{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:K},{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:L},{type:a,tag:e,props:{code:t,language:i},children:[{type:a,tag:g,props:{},children:[{type:a,tag:e,props:{__ignoreMap:f},children:[{type:b,value:t}]}]}]}]},{type:a,tag:c,props:{},children:[{type:b,value:M},{type:a,tag:e,props:{code:u,language:i},children:[{type:a,tag:g,props:{},children:[{type:a,tag:e,props:{__ignoreMap:f},children:[{type:b,value:u}]}]}]}]}]}]},{type:a,tag:c,props:{},children:[{type:b,value:N},{type:a,tag:e,props:{code:v,language:i},children:[{type:a,tag:g,props:{},children:[{type:a,tag:e,props:{__ignoreMap:f},children:[{type:b,value:v}]}]}]}]},{type:a,tag:c,props:{},children:[{type:b,value:O},{type:a,tag:e,props:{code:w,language:i},children:[{type:a,tag:g,props:{},children:[{type:a,tag:e,props:{__ignoreMap:f},children:[{type:b,value:w}]}]}]}]},{type:a,tag:c,props:{},children:[{type:b,value:P},{type:a,tag:e,props:{code:x,language:i},children:[{type:a,tag:g,props:{},children:[{type:a,tag:e,props:{__ignoreMap:f},children:[{type:b,value:x}]}]}]}]}]},{type:a,tag:l,props:{id:Q},children:[{type:b,value:R}]},{type:a,tag:p,props:{},children:[{type:b,value:S},{type:a,tag:n,props:{href:y,rel:[o]},children:[{type:b,value:y}]}]},{type:a,tag:p,props:{},children:[{type:b,value:T}]},{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:U}]},{type:b,value:V},{type:a,tag:d,props:{},children:[{type:b,value:j}]},{type:b,value:k}]},{type:a,tag:c,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:W}]},{type:b,value:X},{type:a,tag:d,props:{},children:[{type:b,value:j}]},{type:b,value:k}]},{type:a,tag:c,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:Y}]},{type:b,value:Z},{type:a,tag:d,props:{},children:[{type:b,value:j}]},{type:b,value:k}]},{type:a,tag:c,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:_}]},{type:b,value:$},{type:a,tag:d,props:{},children:[{type:b,value:j}]},{type:b,value:k}]},{type:a,tag:c,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:aa}]},{type:b,value:ab},{type:a,tag:d,props:{},children:[{type:b,value:j}]},{type:b,value:k}]},{type:a,tag:c,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:ac}]},{type:b,value:ad}]},{type:a,tag:c,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:ae}]},{type:b,value:af}]},{type:a,tag:c,props:{},children:[{type:a,tag:d,props:{},children:[{type:b,value:ag}]},{type:b,value:ah},{type:a,tag:n,props:{href:q,rel:[o]},children:[{type:a,tag:d,props:{},children:[{type:b,value:r}]}]},{type:b,value:ai}]}]},{type:a,tag:l,props:{id:aj},children:[{type:b,value:ak}]},{type:a,tag:h,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:m},{type:a,tag:d,props:{},children:[{type:b,value:al}]},{type:b,value:am}]},{type:a,tag:c,props:{},children:[{type:b,value:m},{type:a,tag:d,props:{},children:[{type:b,value:an}]},{type:b,value:ao}]},{type:a,tag:c,props:{},children:[{type:b,value:m},{type:a,tag:d,props:{},children:[{type:b,value:ap}]},{type:b,value:aq}]},{type:a,tag:c,props:{},children:[{type:b,value:m},{type:a,tag:d,props:{},children:[{type:b,value:ar}]},{type:b,value:as}]}]}],toc:{title:f,searchDepth:at,depth:at,links:[]}},_type:"markdown",_id:"content:nuxt-parse.md",_source:"content",_file:"nuxt-parse.md",_extension:"md"}},state:{},prerenderedAt:1667581717832}}("element","text","li","code-inline","code","","pre","ul","ts","h3"," event","h1","Run ","a","nofollow","p","https:\u002F\u002Fgithub.com\u002Fcolinhacks\u002Fzod","zod","npm i @sidebase\u002Fnuxt-parse\n","import { z, makeParser } from \"@sidebase\u002Fnuxt-parse\"\n\n\u002F\u002F Define the expected response schema\nconst responseSchema = z.object({\n    uuid: z.string().uuid(),\n})\n\n\u002F\u002F Perform the request, use `makeParse` to pass a transformer for the data\nconst { data, error } = await useFetch('https:\u002F\u002Fhttpbin.org\u002Fuuid', {\n    transform: makeParser(responseSchema),\n})\n\nconsole.log(`data is ${data.value}`)\n\u002F\u002F -\u003E `data is {\"uuid\":\"f8df921c-d7f3-43c1-ac9b-3cf5d4da2f7b\"}`\n\nconsole.log(`error is ${error.value}`)\n\u002F\u002F -\u003E `error is false`\n","import { z, makeParser } from \"@sidebase\u002Fnuxt-parse\"\n\n\u002F\u002F Define the expected response schema\nconst responseSchema = z.object({\n    uuid: z.string().uuid(),\n})\n\n\u002F\u002F Perform the request, use `makeParse` to pass a transformer for the data\nconst { data, error } = await useFetch('https:\u002F\u002Fhttpbin.org\u002Fip', {\n    transform: makeParser(responseSchema),\n})\n\nconsole.log(`data is ${data.value}`)\n\u002F\u002F -\u003E `data is null`\n\nconsole.log(`error is ${error.value}`)\n\u002F\u002F -\u003E `error is true`\n","import { defineEventHandler } from 'h3'\nimport type { CompatibilityEvent } from 'h3'\nimport { z, parseParamsAs, parseBodyAs } from \"@sidebase\u002Fnuxt-parse\"\n\n\u002F\u002F Define the schema of the parameters you expect the user to provide you with\nconst paramsSchema = z.object({\n    id: z.string().uuid(),\n})\n\n\u002F\u002F Define the schema of the body you expect the user to provide you with\nconst bodySchema = z.object({\n    name: z.string(),\n    age: z.number()\n})\n\n\u002F\u002F Get a nice type to use throughout your code and components\ntype RequestBody = z.infer\u003Ctypeof bodySchema\u003E\n\nexport default defineEventHandler(async (event: CompatibilityEvent) =\u003E {\n    \u002F\u002F Validate and then get the parameters\n    \u002F\u002F This automatically throws a nice HTTP 422 error with more information if the data is invalid\n    const params = parseParamsAs(event, paramsSchema)\n\n    let body: RequestBody;\n    try {\n        body = parseBodyAs(event, paramsSchema)\n    } catch(error) {\n        \u002F\u002F Fallback, this avoids automatic raising + returning of the HTTP 422 error\n        body = {\n            name: 'Bernd',\n            age: 88\n        }\n    }\n\n    \u002F\u002F Return the full entity\n    return {\n        id: params.id,\n        ...body\n    }\n})\n","import { z, parseDataAs } from \"@sidebase\u002Fnuxt-parse\"\n\nconst parsedData = await parseDataAs({ test: \"1\" }, z.object({ test: z.number() )}))\n\u002F\u002F -\u003E throws! `\"1\"` is not a number, but a string!\n\nconst parsedData = await parseDataAs({ test: 1 }, z.object({ test: z.number() )}))\nconsole.log(parsedData)\n\u002F\u002F -\u003E output: `{ test: 1 }`\n\n\nconst parsedData = await parseDataAs({ test: \"1\" }, z.object({ test: z.string().transform(v =\u003E parseInt(v)) )}))\nconsole.log(parsedData)\n\u002F\u002F -\u003E output: `{ test: 1 }` (we used `.transform` to ensure that we get a number)\n","import { z, parseDataAs } from \"@sidebase\u002Fnuxt-parse\"\n\nconst fakeDatabaseQuery = async () =\u003E { id: 1 }\nconst parsedData = await parseDataAs(fakeDatabaseQuery, z.object({ id: z.number() )}))\n\nconsole.log(parsedData)\n\u002F\u002F -\u003E output: `1`\n","https:\u002F\u002Fnuxt-sidebase-parse.sidebase.io",false,"Features","root","features","✔️ Validate Data using ","✔️ Deserialize and Serialize user, backend, api data","✔️ Helpers focused on Nuxt 3 usage and developer experience","usage","Usage","bash","Then, e.g., in your code:","Make an arbitrary parser, e.g., to deserialize data from an API:","Example with valid data:","Example with invalid data:","Handle user data in an endpoint:","Parse any data:","Also works with async data, e.g., when fetching from another API or DB:","documentation","Documentation","Full tsdoc-documentation is here: ","This module exports:","parseBodyAs",": Parse body of ","parseParamsAs",": Parse params of ","parseQueryAs",": Parse query of ","parseCookieAs",": Parse cookies of ","parseHeaderAs",": Parse header of ","parseDataAs",": Parse sync or async data","makeParser",": Make your own parser (see example above)","z",": ",", the library used for parsing","development","Development","npm run test"," to generate type stubs","npm run lint"," to run eslint","npm run type"," to run typescheck via tsc","npm publish"," to run build and publish the package",2))